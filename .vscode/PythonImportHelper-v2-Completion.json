[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "ModelView",
        "importPath": "flask_admin.contrib.sqla",
        "description": "flask_admin.contrib.sqla",
        "isExtraImport": true,
        "detail": "flask_admin.contrib.sqla",
        "documentation": {}
    },
    {
        "label": "ModelView",
        "importPath": "flask_admin.contrib.sqla",
        "description": "flask_admin.contrib.sqla",
        "isExtraImport": true,
        "detail": "flask_admin.contrib.sqla",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Admin",
        "importPath": "flask_admin",
        "description": "flask_admin",
        "isExtraImport": true,
        "detail": "flask_admin",
        "documentation": {}
    },
    {
        "label": "AdminIndexView",
        "importPath": "flask_admin",
        "description": "flask_admin",
        "isExtraImport": true,
        "detail": "flask_admin",
        "documentation": {}
    },
    {
        "label": "expose",
        "importPath": "flask_admin",
        "description": "flask_admin",
        "isExtraImport": true,
        "detail": "flask_admin",
        "documentation": {}
    },
    {
        "label": "helpers",
        "importPath": "flask_admin",
        "description": "flask_admin",
        "isExtraImport": true,
        "detail": "flask_admin",
        "documentation": {}
    },
    {
        "label": "ICON_TYPE_FONT_AWESOME",
        "importPath": "flask_admin.consts",
        "description": "flask_admin.consts",
        "isExtraImport": true,
        "detail": "flask_admin.consts",
        "documentation": {}
    },
    {
        "label": "Babel",
        "importPath": "flask_babel",
        "description": "flask_babel",
        "isExtraImport": true,
        "detail": "flask_babel",
        "documentation": {}
    },
    {
        "label": "Cache",
        "importPath": "flask_caching",
        "description": "flask_caching",
        "isExtraImport": true,
        "detail": "flask_caching",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "RoleMixin",
        "importPath": "flask_security.core",
        "description": "flask_security.core",
        "isExtraImport": true,
        "detail": "flask_security.core",
        "documentation": {}
    },
    {
        "label": "Security",
        "importPath": "flask_security.core",
        "description": "flask_security.core",
        "isExtraImport": true,
        "detail": "flask_security.core",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_security.core",
        "description": "flask_security.core",
        "isExtraImport": true,
        "detail": "flask_security.core",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyUserDatastore",
        "importPath": "flask_security.datastore",
        "description": "flask_security.datastore",
        "isExtraImport": true,
        "detail": "flask_security.datastore",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "flask_security.utils",
        "description": "flask_security.utils",
        "isExtraImport": true,
        "detail": "flask_security.utils",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "inspect",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "UserView",
        "importPath": "admin.views.users",
        "description": "admin.views.users",
        "isExtraImport": true,
        "detail": "admin.views.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "bot.database.models",
        "description": "bot.database.models",
        "isExtraImport": true,
        "detail": "bot.database.models",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "bot.database.models",
        "description": "bot.database.models",
        "isExtraImport": true,
        "detail": "bot.database.models",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "bot.database.models",
        "description": "bot.database.models",
        "isExtraImport": true,
        "detail": "bot.database.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "bot.database.models",
        "description": "bot.database.models",
        "isExtraImport": true,
        "detail": "bot.database.models",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "ADMIN_HOST",
        "importPath": "admin.config",
        "description": "admin.config",
        "isExtraImport": true,
        "detail": "admin.config",
        "documentation": {}
    },
    {
        "label": "ADMIN_PORT",
        "importPath": "admin.config",
        "description": "admin.config",
        "isExtraImport": true,
        "detail": "admin.config",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "importPath": "admin.config",
        "description": "admin.config",
        "isExtraImport": true,
        "detail": "admin.config",
        "documentation": {}
    },
    {
        "label": "orjson",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "orjson",
        "description": "orjson",
        "detail": "orjson",
        "documentation": {}
    },
    {
        "label": "ClientSession",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "ClientTimeout",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "ClientSession",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "ClientSession",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "web",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "web",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "AbstractAnalyticsLogger",
        "importPath": "bot.analytics.types",
        "description": "bot.analytics.types",
        "isExtraImport": true,
        "detail": "bot.analytics.types",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "bot.analytics.types",
        "description": "bot.analytics.types",
        "isExtraImport": true,
        "detail": "bot.analytics.types",
        "documentation": {}
    },
    {
        "label": "AbstractAnalyticsLogger",
        "importPath": "bot.analytics.types",
        "description": "bot.analytics.types",
        "isExtraImport": true,
        "detail": "bot.analytics.types",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "bot.analytics.types",
        "description": "bot.analytics.types",
        "isExtraImport": true,
        "detail": "bot.analytics.types",
        "documentation": {}
    },
    {
        "label": "AbstractAnalyticsLogger",
        "importPath": "bot.analytics.types",
        "description": "bot.analytics.types",
        "isExtraImport": true,
        "detail": "bot.analytics.types",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "bot.analytics.types",
        "description": "bot.analytics.types",
        "isExtraImport": true,
        "detail": "bot.analytics.types",
        "documentation": {}
    },
    {
        "label": "AbstractAnalyticsLogger",
        "importPath": "bot.analytics.types",
        "description": "bot.analytics.types",
        "isExtraImport": true,
        "detail": "bot.analytics.types",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "bot.analytics.types",
        "description": "bot.analytics.types",
        "isExtraImport": true,
        "detail": "bot.analytics.types",
        "documentation": {}
    },
    {
        "label": "EventProperties",
        "importPath": "bot.analytics.types",
        "description": "bot.analytics.types",
        "isExtraImport": true,
        "detail": "bot.analytics.types",
        "documentation": {}
    },
    {
        "label": "EventType",
        "importPath": "bot.analytics.types",
        "description": "bot.analytics.types",
        "isExtraImport": true,
        "detail": "bot.analytics.types",
        "documentation": {}
    },
    {
        "label": "UserProperties",
        "importPath": "bot.analytics.types",
        "description": "bot.analytics.types",
        "isExtraImport": true,
        "detail": "bot.analytics.types",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "IPvAnyAddress",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "AbstractSerializer",
        "importPath": "bot.cache.serialization",
        "description": "bot.cache.serialization",
        "isExtraImport": true,
        "detail": "bot.cache.serialization",
        "documentation": {}
    },
    {
        "label": "PickleSerializer",
        "importPath": "bot.cache.serialization",
        "description": "bot.cache.serialization",
        "isExtraImport": true,
        "detail": "bot.cache.serialization",
        "documentation": {}
    },
    {
        "label": "redis_client",
        "importPath": "bot.core.loader",
        "description": "bot.core.loader",
        "isExtraImport": true,
        "detail": "bot.core.loader",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Dispatcher",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "BaseMiddleware",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "BaseMiddleware",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "BaseMiddleware",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "BaseMiddleware",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "BaseMiddleware",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "DefaultBotProperties",
        "importPath": "aiogram.client.default",
        "description": "aiogram.client.default",
        "isExtraImport": true,
        "detail": "aiogram.client.default",
        "documentation": {}
    },
    {
        "label": "ParseMode",
        "importPath": "aiogram.enums",
        "description": "aiogram.enums",
        "isExtraImport": true,
        "detail": "aiogram.enums",
        "documentation": {}
    },
    {
        "label": "ChatMemberStatus",
        "importPath": "aiogram.enums",
        "description": "aiogram.enums",
        "isExtraImport": true,
        "detail": "aiogram.enums",
        "documentation": {}
    },
    {
        "label": "DefaultKeyBuilder",
        "importPath": "aiogram.fsm.storage.base",
        "description": "aiogram.fsm.storage.base",
        "isExtraImport": true,
        "detail": "aiogram.fsm.storage.base",
        "documentation": {}
    },
    {
        "label": "RedisStorage",
        "importPath": "aiogram.fsm.storage.redis",
        "description": "aiogram.fsm.storage.redis",
        "isExtraImport": true,
        "detail": "aiogram.fsm.storage.redis",
        "documentation": {}
    },
    {
        "label": "I18n",
        "importPath": "aiogram.utils.i18n.core",
        "description": "aiogram.utils.i18n.core",
        "isExtraImport": true,
        "detail": "aiogram.utils.i18n.core",
        "documentation": {}
    },
    {
        "label": "ConnectionPool",
        "importPath": "redis.asyncio",
        "description": "redis.asyncio",
        "isExtraImport": true,
        "detail": "redis.asyncio",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "redis.asyncio",
        "description": "redis.asyncio",
        "isExtraImport": true,
        "detail": "redis.asyncio",
        "documentation": {}
    },
    {
        "label": "DEFAULT_LOCALE",
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "isExtraImport": true,
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "I18N_DOMAIN",
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "isExtraImport": true,
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "LOCALES_DIR",
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "isExtraImport": true,
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "isExtraImport": true,
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "isExtraImport": true,
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "isExtraImport": true,
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_LOCALE",
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "isExtraImport": true,
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "isExtraImport": true,
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "isExtraImport": true,
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "isExtraImport": true,
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "isExtraImport": true,
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "bot.database.models.base",
        "description": "bot.database.models.base",
        "isExtraImport": true,
        "detail": "bot.database.models.base",
        "documentation": {}
    },
    {
        "label": "big_int_pk",
        "importPath": "bot.database.models.base",
        "description": "bot.database.models.base",
        "isExtraImport": true,
        "detail": "bot.database.models.base",
        "documentation": {}
    },
    {
        "label": "created_at",
        "importPath": "bot.database.models.base",
        "description": "bot.database.models.base",
        "isExtraImport": true,
        "detail": "bot.database.models.base",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "Connection",
        "importPath": "asyncpg",
        "description": "asyncpg",
        "isExtraImport": true,
        "detail": "asyncpg",
        "documentation": {}
    },
    {
        "label": "AsyncEngine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_engine_from_config",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "BaseFilter",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "BaseFilter",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "CommandStart",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "CallbackQuery",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardButton",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardMarkup",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardButton",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardMarkup",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardButton",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardMarkup",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "BotCommand",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "BotCommandScopeDefault",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "CallbackQuery",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "BufferedInputFile",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "is_admin",
        "importPath": "bot.services.users",
        "description": "bot.services.users",
        "isExtraImport": true,
        "detail": "bot.services.users",
        "documentation": {}
    },
    {
        "label": "get_all_users",
        "importPath": "bot.services.users",
        "description": "bot.services.users",
        "isExtraImport": true,
        "detail": "bot.services.users",
        "documentation": {}
    },
    {
        "label": "get_user_count",
        "importPath": "bot.services.users",
        "description": "bot.services.users",
        "isExtraImport": true,
        "detail": "bot.services.users",
        "documentation": {}
    },
    {
        "label": "add_user",
        "importPath": "bot.services.users",
        "description": "bot.services.users",
        "isExtraImport": true,
        "detail": "bot.services.users",
        "documentation": {}
    },
    {
        "label": "user_exists",
        "importPath": "bot.services.users",
        "description": "bot.services.users",
        "isExtraImport": true,
        "detail": "bot.services.users",
        "documentation": {}
    },
    {
        "label": "get_language_code",
        "importPath": "bot.services.users",
        "description": "bot.services.users",
        "isExtraImport": true,
        "detail": "bot.services.users",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.fsm.context",
        "description": "aiogram.fsm.context",
        "isExtraImport": true,
        "detail": "aiogram.fsm.context",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.fsm.context",
        "description": "aiogram.fsm.context",
        "isExtraImport": true,
        "detail": "aiogram.fsm.context",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "StatesGroup",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "ask_deepseek",
        "importPath": "bot.services.deepseek_client",
        "description": "bot.services.deepseek_client",
        "isExtraImport": true,
        "detail": "bot.services.deepseek_client",
        "documentation": {}
    },
    {
        "label": "back_button_keyboard",
        "importPath": "bot.keyboards.inline.contacts",
        "description": "bot.keyboards.inline.contacts",
        "isExtraImport": true,
        "detail": "bot.keyboards.inline.contacts",
        "documentation": {}
    },
    {
        "label": "back_button_keyboard",
        "importPath": "bot.keyboards.inline.contacts",
        "description": "bot.keyboards.inline.contacts",
        "isExtraImport": true,
        "detail": "bot.keyboards.inline.contacts",
        "documentation": {}
    },
    {
        "label": "contacts_keyboard",
        "importPath": "bot.keyboards.inline.contacts",
        "description": "bot.keyboards.inline.contacts",
        "isExtraImport": true,
        "detail": "bot.keyboards.inline.contacts",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "aiogram.utils.i18n",
        "description": "aiogram.utils.i18n",
        "isExtraImport": true,
        "detail": "aiogram.utils.i18n",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "aiogram.utils.i18n",
        "description": "aiogram.utils.i18n",
        "isExtraImport": true,
        "detail": "aiogram.utils.i18n",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "aiogram.utils.i18n",
        "description": "aiogram.utils.i18n",
        "isExtraImport": true,
        "detail": "aiogram.utils.i18n",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "aiogram.utils.i18n",
        "description": "aiogram.utils.i18n",
        "isExtraImport": true,
        "detail": "aiogram.utils.i18n",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "aiogram.utils.i18n",
        "description": "aiogram.utils.i18n",
        "isExtraImport": true,
        "detail": "aiogram.utils.i18n",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "aiogram.utils.i18n",
        "description": "aiogram.utils.i18n",
        "isExtraImport": true,
        "detail": "aiogram.utils.i18n",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "aiogram.utils.i18n",
        "description": "aiogram.utils.i18n",
        "isExtraImport": true,
        "detail": "aiogram.utils.i18n",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "aiogram.utils.i18n",
        "description": "aiogram.utils.i18n",
        "isExtraImport": true,
        "detail": "aiogram.utils.i18n",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "aiogram.utils.i18n",
        "description": "aiogram.utils.i18n",
        "isExtraImport": true,
        "detail": "aiogram.utils.i18n",
        "documentation": {}
    },
    {
        "label": "AdminFilter",
        "importPath": "bot.filters.admin",
        "description": "bot.filters.admin",
        "isExtraImport": true,
        "detail": "bot.filters.admin",
        "documentation": {}
    },
    {
        "label": "convert_users_to_csv",
        "importPath": "bot.utils.users_export",
        "description": "bot.utils.users_export",
        "isExtraImport": true,
        "detail": "bot.utils.users_export",
        "documentation": {}
    },
    {
        "label": "main_keyboard",
        "importPath": "bot.keyboards.inline.menu",
        "description": "bot.keyboards.inline.menu",
        "isExtraImport": true,
        "detail": "bot.keyboards.inline.menu",
        "documentation": {}
    },
    {
        "label": "main_keyboard",
        "importPath": "bot.keyboards.inline.menu",
        "description": "bot.keyboards.inline.menu",
        "isExtraImport": true,
        "detail": "bot.keyboards.inline.menu",
        "documentation": {}
    },
    {
        "label": "main_keyboard",
        "importPath": "bot.keyboards.inline.menu",
        "description": "bot.keyboards.inline.menu",
        "isExtraImport": true,
        "detail": "bot.keyboards.inline.menu",
        "documentation": {}
    },
    {
        "label": "settings_keyboard",
        "importPath": "bot.keyboards.inline.settings",
        "description": "bot.keyboards.inline.settings",
        "isExtraImport": true,
        "detail": "bot.keyboards.inline.settings",
        "documentation": {}
    },
    {
        "label": "prometheus_client",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "aiohttp.web_request",
        "description": "aiohttp.web_request",
        "isExtraImport": true,
        "detail": "aiohttp.web_request",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "aiohttp.web_response",
        "description": "aiohttp.web_response",
        "isExtraImport": true,
        "detail": "aiohttp.web_response",
        "documentation": {}
    },
    {
        "label": "analytics",
        "importPath": "bot.services.analytics",
        "description": "bot.services.analytics",
        "isExtraImport": true,
        "detail": "bot.services.analytics",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardBuilder",
        "importPath": "aiogram.utils.keyboard",
        "description": "aiogram.utils.keyboard",
        "isExtraImport": true,
        "detail": "aiogram.utils.keyboard",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardBuilder",
        "importPath": "aiogram.utils.keyboard",
        "description": "aiogram.utils.keyboard",
        "isExtraImport": true,
        "detail": "aiogram.utils.keyboard",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardBuilder",
        "importPath": "aiogram.utils.keyboard",
        "description": "aiogram.utils.keyboard",
        "isExtraImport": true,
        "detail": "aiogram.utils.keyboard",
        "documentation": {}
    },
    {
        "label": "find_command_argument",
        "importPath": "bot.utils.command",
        "description": "bot.utils.command",
        "isExtraImport": true,
        "detail": "bot.utils.command",
        "documentation": {}
    },
    {
        "label": "TelegramNotFound",
        "importPath": "aiogram.exceptions",
        "description": "aiogram.exceptions",
        "isExtraImport": true,
        "detail": "aiogram.exceptions",
        "documentation": {}
    },
    {
        "label": "GetChatMember",
        "importPath": "aiogram.methods",
        "description": "aiogram.methods",
        "isExtraImport": true,
        "detail": "aiogram.methods",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "bot.database.database",
        "description": "bot.database.database",
        "isExtraImport": true,
        "detail": "bot.database.database",
        "documentation": {}
    },
    {
        "label": "I18nMiddleware",
        "importPath": "aiogram.utils.i18n.middleware",
        "description": "aiogram.utils.i18n.middleware",
        "isExtraImport": true,
        "detail": "aiogram.utils.i18n.middleware",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "aiohttp.web_exceptions",
        "description": "aiohttp.web_exceptions",
        "isExtraImport": true,
        "detail": "aiohttp.web_exceptions",
        "documentation": {}
    },
    {
        "label": "middleware",
        "importPath": "aiohttp.web_middlewares",
        "description": "aiohttp.web_middlewares",
        "isExtraImport": true,
        "detail": "aiohttp.web_middlewares",
        "documentation": {}
    },
    {
        "label": "TTLCache",
        "importPath": "cachetools",
        "description": "cachetools",
        "isExtraImport": true,
        "detail": "cachetools",
        "documentation": {}
    },
    {
        "label": "AmplitudeTelegramLogger",
        "importPath": "bot.analytics.amplitude",
        "description": "bot.analytics.amplitude",
        "isExtraImport": true,
        "detail": "bot.analytics.amplitude",
        "documentation": {}
    },
    {
        "label": "SingletonMeta",
        "importPath": "bot.utils.singleton",
        "description": "bot.utils.singleton",
        "isExtraImport": true,
        "detail": "bot.utils.singleton",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "build_key",
        "importPath": "bot.cache.redis",
        "description": "bot.cache.redis",
        "isExtraImport": true,
        "detail": "bot.cache.redis",
        "documentation": {}
    },
    {
        "label": "cached",
        "importPath": "bot.cache.redis",
        "description": "bot.cache.redis",
        "isExtraImport": true,
        "detail": "bot.cache.redis",
        "documentation": {}
    },
    {
        "label": "clear_cache",
        "importPath": "bot.cache.redis",
        "description": "bot.cache.redis",
        "isExtraImport": true,
        "detail": "bot.cache.redis",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Connection",
        "importPath": "sqlalchemy.engine",
        "description": "sqlalchemy.engine",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len('bin') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'telegram-bot-template-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.13/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len('bin') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'telegram-bot-template-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.13/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'telegram-bot-template-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.13/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'telegram-bot-template-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.13/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = 'telegram-bot-template-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.13/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in '../lib/python3.13/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "UserView",
        "kind": 6,
        "importPath": "admin.views.users",
        "description": "admin.views.users",
        "peekOfCode": "class UserView(ModelView):\n    can_delete = True\n    can_create = False\n    can_edit = True\n    can_view_details = True\n    edit_modal = True\n    can_export = True\n    details_modal = True\n    export_types = [\"csv\", \"xlsx\", \"json\", \"yaml\"]\n    column_searchable_list = [\"id\", \"username\", \"first_name\", \"last_name\"]",
        "detail": "admin.views.users",
        "documentation": {}
    },
    {
        "label": "RoleModel",
        "kind": 6,
        "importPath": "admin.app",
        "description": "admin.app",
        "peekOfCode": "class RoleModel(db.Model, RoleMixin):\n    __tablename__ = \"role\"\n    id = db.Column(db.Integer(), primary_key=True)\n    name = db.Column(db.String(80), unique=True)\n    description = db.Column(db.String(255))\n    def __str__(self) -> str:\n        return self.name\nclass AdminModel(db.Model, UserMixin):\n    __tablename__ = \"admin\"\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": "admin.app",
        "documentation": {}
    },
    {
        "label": "AdminModel",
        "kind": 6,
        "importPath": "admin.app",
        "description": "admin.app",
        "peekOfCode": "class AdminModel(db.Model, UserMixin):\n    __tablename__ = \"admin\"\n    id = db.Column(db.Integer, primary_key=True)\n    first_name = db.Column(db.String(255))\n    last_name = db.Column(db.String(255))\n    email = db.Column(db.String(255), unique=True, nullable=False)\n    password = db.Column(db.String(255), nullable=False)\n    active = db.Column(db.Boolean())\n    confirmed_at = db.Column(db.DateTime(), default=datetime.utcnow)\n    fs_uniquifier = db.Column(db.String(255), unique=True)",
        "detail": "admin.app",
        "documentation": {}
    },
    {
        "label": "RoleView",
        "kind": 6,
        "importPath": "admin.app",
        "description": "admin.app",
        "peekOfCode": "class RoleView(ModelView):\n    can_delete = False\n    can_edit = False\n    can_create = False\n    can_view_details = False\n    edit_modal = True\n    create_modal = True\n    can_export = False\n    details_modal = True\n    def is_accessible(self) -> bool:",
        "detail": "admin.app",
        "documentation": {}
    },
    {
        "label": "AdminView",
        "kind": 6,
        "importPath": "admin.app",
        "description": "admin.app",
        "peekOfCode": "class AdminView(RoleView):\n    can_view_details = True\n    can_delete = True\n    can_edit = True\n    can_export = True\n    can_create = True\n    export_types = [\"csv\", \"xlsx\", \"json\", \"yaml\"]\n    column_editable_list = [\"email\", \"first_name\", \"last_name\"]\n    column_searchable_list = column_editable_list\n    column_exclude_list = [\"password\"]",
        "detail": "admin.app",
        "documentation": {}
    },
    {
        "label": "CustomAdminIndexView",
        "kind": 6,
        "importPath": "admin.app",
        "description": "admin.app",
        "peekOfCode": "class CustomAdminIndexView(AdminIndexView):\n    @expose(\"/\")\n    def index(self) -> str:\n        days_before: int = 1\n        period_start = datetime.now(timezone.utc) - timedelta(days=days_before)\n        order_count = get_orders_count()\n        user_count = get_user_count()\n        new_user_count = get_new_user_count(days_before)\n        new_user_count = get_new_user_count(days_before)\n        return self.render(",
        "detail": "admin.app",
        "documentation": {}
    },
    {
        "label": "get_orders_count",
        "kind": 2,
        "importPath": "admin.app",
        "description": "admin.app",
        "peekOfCode": "def get_orders_count() -> int:\n    return 0\ndef get_user_count() -> int:\n    return db.session.query(AppUserModel).count()\ndef get_new_user_count(days_before: int = 1) -> int:\n    period_start = datetime.now(timezone.utc) - timedelta(days=days_before)\n    return db.session.query(AppUserModel).filter(AppUserModel.created_at >= period_start).count()\nclass CustomAdminIndexView(AdminIndexView):\n    @expose(\"/\")\n    def index(self) -> str:",
        "detail": "admin.app",
        "documentation": {}
    },
    {
        "label": "get_user_count",
        "kind": 2,
        "importPath": "admin.app",
        "description": "admin.app",
        "peekOfCode": "def get_user_count() -> int:\n    return db.session.query(AppUserModel).count()\ndef get_new_user_count(days_before: int = 1) -> int:\n    period_start = datetime.now(timezone.utc) - timedelta(days=days_before)\n    return db.session.query(AppUserModel).filter(AppUserModel.created_at >= period_start).count()\nclass CustomAdminIndexView(AdminIndexView):\n    @expose(\"/\")\n    def index(self) -> str:\n        days_before: int = 1\n        period_start = datetime.now(timezone.utc) - timedelta(days=days_before)",
        "detail": "admin.app",
        "documentation": {}
    },
    {
        "label": "get_new_user_count",
        "kind": 2,
        "importPath": "admin.app",
        "description": "admin.app",
        "peekOfCode": "def get_new_user_count(days_before: int = 1) -> int:\n    period_start = datetime.now(timezone.utc) - timedelta(days=days_before)\n    return db.session.query(AppUserModel).filter(AppUserModel.created_at >= period_start).count()\nclass CustomAdminIndexView(AdminIndexView):\n    @expose(\"/\")\n    def index(self) -> str:\n        days_before: int = 1\n        period_start = datetime.now(timezone.utc) - timedelta(days=days_before)\n        order_count = get_orders_count()\n        user_count = get_user_count()",
        "detail": "admin.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "admin.app",
        "description": "admin.app",
        "peekOfCode": "def index() -> Response:\n    return redirect(url_for(\"admin.index\"))\n# Initializing the admin panel\nadmin = Admin(\n    app,\n    name=\"Telegram Bot\",\n    base_template=\"my_master.html\",\n    index_view=CustomAdminIndexView(\n        name=\"Home\",\n        url=\"/admin\",",
        "detail": "admin.app",
        "documentation": {}
    },
    {
        "label": "security_context_processor",
        "kind": 2,
        "importPath": "admin.app",
        "description": "admin.app",
        "peekOfCode": "def security_context_processor() -> dict[str, Any]:\n    return {\n        \"admin_base_template\": admin.base_template,\n        \"admin_view\": admin.index_view,\n        \"h\": helpers,\n        \"get_url\": url_for,\n    }\ndef init_db() -> None:\n    inspector = inspect(db.engine)\n    if inspector.has_table(\"admin\") and inspector.has_table(\"role\"):",
        "detail": "admin.app",
        "documentation": {}
    },
    {
        "label": "init_db",
        "kind": 2,
        "importPath": "admin.app",
        "description": "admin.app",
        "peekOfCode": "def init_db() -> None:\n    inspector = inspect(db.engine)\n    if inspector.has_table(\"admin\") and inspector.has_table(\"role\"):\n        return\n    db.create_all()\n    admin_role = RoleModel(name=\"user\", description=\"does not have access to other administrators\")\n    super_admin_role = RoleModel(name=\"superuser\", description=\"has access to manage all administrators\")\n    db.session.add(admin_role)\n    db.session.add(super_admin_role)\n    db.session.commit()",
        "detail": "admin.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "admin.app",
        "description": "admin.app",
        "peekOfCode": "app = Flask(__name__)\napp.config.from_pyfile(\"config.py\")\ndb = SQLAlchemy(app)\ncache = Cache(app)\nbabel = Babel(app)\n# Define models\nroles_admins = db.Table(\n    \"roles_admins\",\n    db.Column(\"admin_id\", db.Integer(), db.ForeignKey(\"admin.id\")),\n    db.Column(\"role_id\", db.Integer(), db.ForeignKey(\"role.id\")),",
        "detail": "admin.app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "admin.app",
        "description": "admin.app",
        "peekOfCode": "db = SQLAlchemy(app)\ncache = Cache(app)\nbabel = Babel(app)\n# Define models\nroles_admins = db.Table(\n    \"roles_admins\",\n    db.Column(\"admin_id\", db.Integer(), db.ForeignKey(\"admin.id\")),\n    db.Column(\"role_id\", db.Integer(), db.ForeignKey(\"role.id\")),\n)\nclass RoleModel(db.Model, RoleMixin):",
        "detail": "admin.app",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 5,
        "importPath": "admin.app",
        "description": "admin.app",
        "peekOfCode": "cache = Cache(app)\nbabel = Babel(app)\n# Define models\nroles_admins = db.Table(\n    \"roles_admins\",\n    db.Column(\"admin_id\", db.Integer(), db.ForeignKey(\"admin.id\")),\n    db.Column(\"role_id\", db.Integer(), db.ForeignKey(\"role.id\")),\n)\nclass RoleModel(db.Model, RoleMixin):\n    __tablename__ = \"role\"",
        "detail": "admin.app",
        "documentation": {}
    },
    {
        "label": "babel",
        "kind": 5,
        "importPath": "admin.app",
        "description": "admin.app",
        "peekOfCode": "babel = Babel(app)\n# Define models\nroles_admins = db.Table(\n    \"roles_admins\",\n    db.Column(\"admin_id\", db.Integer(), db.ForeignKey(\"admin.id\")),\n    db.Column(\"role_id\", db.Integer(), db.ForeignKey(\"role.id\")),\n)\nclass RoleModel(db.Model, RoleMixin):\n    __tablename__ = \"role\"\n    id = db.Column(db.Integer(), primary_key=True)",
        "detail": "admin.app",
        "documentation": {}
    },
    {
        "label": "roles_admins",
        "kind": 5,
        "importPath": "admin.app",
        "description": "admin.app",
        "peekOfCode": "roles_admins = db.Table(\n    \"roles_admins\",\n    db.Column(\"admin_id\", db.Integer(), db.ForeignKey(\"admin.id\")),\n    db.Column(\"role_id\", db.Integer(), db.ForeignKey(\"role.id\")),\n)\nclass RoleModel(db.Model, RoleMixin):\n    __tablename__ = \"role\"\n    id = db.Column(db.Integer(), primary_key=True)\n    name = db.Column(db.String(80), unique=True)\n    description = db.Column(db.String(255))",
        "detail": "admin.app",
        "documentation": {}
    },
    {
        "label": "admin_datastore",
        "kind": 5,
        "importPath": "admin.app",
        "description": "admin.app",
        "peekOfCode": "admin_datastore = SQLAlchemyUserDatastore(db, AdminModel, RoleModel)\nsecurity = Security(app, admin_datastore)\n# Create customized model view class\nclass RoleView(ModelView):\n    can_delete = False\n    can_edit = False\n    can_create = False\n    can_view_details = False\n    edit_modal = True\n    create_modal = True",
        "detail": "admin.app",
        "documentation": {}
    },
    {
        "label": "security",
        "kind": 5,
        "importPath": "admin.app",
        "description": "admin.app",
        "peekOfCode": "security = Security(app, admin_datastore)\n# Create customized model view class\nclass RoleView(ModelView):\n    can_delete = False\n    can_edit = False\n    can_create = False\n    can_view_details = False\n    edit_modal = True\n    create_modal = True\n    can_export = False",
        "detail": "admin.app",
        "documentation": {}
    },
    {
        "label": "admin",
        "kind": 5,
        "importPath": "admin.app",
        "description": "admin.app",
        "peekOfCode": "admin = Admin(\n    app,\n    name=\"Telegram Bot\",\n    base_template=\"my_master.html\",\n    index_view=CustomAdminIndexView(\n        name=\"Home\",\n        url=\"/admin\",\n        menu_icon_type=ICON_TYPE_FONT_AWESOME,\n        menu_icon_value=\"fa-home\",\n    ),",
        "detail": "admin.app",
        "documentation": {}
    },
    {
        "label": "database_url",
        "kind": 2,
        "importPath": "admin.config",
        "description": "admin.config",
        "peekOfCode": "def database_url() -> str:\n    db_host: str = os.getenv(\"DB_HOST\") or \"localhost\"\n    db_port: int = int(os.getenv(\"DB_PORT\") or 5432)\n    db_user: str = os.getenv(\"DB_USER\") or \"postgres\"\n    db_pass: str | None = os.getenv(\"DB_PASS\")\n    db_name: str = os.getenv(\"DB_NAME\") or \"postgres\"\n    if db_pass:\n        return f\"postgresql://{db_user}:{db_pass}@{db_host}:{db_port}/{db_name}\"\n    return f\"postgresql://{db_user}@{db_host}:{db_port}/{db_name}\"\nSQLALCHEMY_DATABASE_URI: str = database_url()",
        "detail": "admin.config",
        "documentation": {}
    },
    {
        "label": "BABEL_DEFAULT_LOCALE",
        "kind": 5,
        "importPath": "admin.config",
        "description": "admin.config",
        "peekOfCode": "BABEL_DEFAULT_LOCALE = os.getenv(\"BABEL_DEFAULT_LOCALE\") or \"en\"\n# Create dummy secrey key so we can use sessions\nSECRET_KEY: str = os.getenv(\"SECRET_KEY\") or \"x%#3&%giwv8f0+%r946en7z&d@9*rc$sl0qoql56xr%bh^w2mj\"\n# SQLAlchemy config\ndef database_url() -> str:\n    db_host: str = os.getenv(\"DB_HOST\") or \"localhost\"\n    db_port: int = int(os.getenv(\"DB_PORT\") or 5432)\n    db_user: str = os.getenv(\"DB_USER\") or \"postgres\"\n    db_pass: str | None = os.getenv(\"DB_PASS\")\n    db_name: str = os.getenv(\"DB_NAME\") or \"postgres\"",
        "detail": "admin.config",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_ECHO",
        "kind": 5,
        "importPath": "admin.config",
        "description": "admin.config",
        "peekOfCode": "SQLALCHEMY_ECHO = False\nSQLALCHEMY_TRACK_MODIFICATIONS = False\n# Flask-Security config\nSECURITY_URL_PREFIX = \"/admin\"\nSECURITY_PASSWORD_HASH: str = os.getenv(\"SECURITY_PASSWORD_HASH\") or \"pbkdf2_sha512\"\nSECURITY_PASSWORD_SALT: str = os.getenv(\"SECURITY_PASSWORD_SALT\") or \"ATGUOHAELKiubahiughaerGOJAEGj\"\n# Flask-Security URLs, overridden because they don't put a / at the end\nSECURITY_LOGIN_URL = \"/login/\"\nSECURITY_LOGOUT_URL = \"/logout/\"\nSECURITY_REGISTER_URL = \"/register/\"",
        "detail": "admin.config",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_TRACK_MODIFICATIONS",
        "kind": 5,
        "importPath": "admin.config",
        "description": "admin.config",
        "peekOfCode": "SQLALCHEMY_TRACK_MODIFICATIONS = False\n# Flask-Security config\nSECURITY_URL_PREFIX = \"/admin\"\nSECURITY_PASSWORD_HASH: str = os.getenv(\"SECURITY_PASSWORD_HASH\") or \"pbkdf2_sha512\"\nSECURITY_PASSWORD_SALT: str = os.getenv(\"SECURITY_PASSWORD_SALT\") or \"ATGUOHAELKiubahiughaerGOJAEGj\"\n# Flask-Security URLs, overridden because they don't put a / at the end\nSECURITY_LOGIN_URL = \"/login/\"\nSECURITY_LOGOUT_URL = \"/logout/\"\nSECURITY_REGISTER_URL = \"/register/\"\nSECURITY_POST_LOGIN_VIEW = \"/admin/\"",
        "detail": "admin.config",
        "documentation": {}
    },
    {
        "label": "SECURITY_URL_PREFIX",
        "kind": 5,
        "importPath": "admin.config",
        "description": "admin.config",
        "peekOfCode": "SECURITY_URL_PREFIX = \"/admin\"\nSECURITY_PASSWORD_HASH: str = os.getenv(\"SECURITY_PASSWORD_HASH\") or \"pbkdf2_sha512\"\nSECURITY_PASSWORD_SALT: str = os.getenv(\"SECURITY_PASSWORD_SALT\") or \"ATGUOHAELKiubahiughaerGOJAEGj\"\n# Flask-Security URLs, overridden because they don't put a / at the end\nSECURITY_LOGIN_URL = \"/login/\"\nSECURITY_LOGOUT_URL = \"/logout/\"\nSECURITY_REGISTER_URL = \"/register/\"\nSECURITY_POST_LOGIN_VIEW = \"/admin/\"\nSECURITY_POST_LOGOUT_VIEW = \"/admin/\"\nSECURITY_POST_REGISTER_VIEW = \"/admin/\"",
        "detail": "admin.config",
        "documentation": {}
    },
    {
        "label": "SECURITY_LOGIN_URL",
        "kind": 5,
        "importPath": "admin.config",
        "description": "admin.config",
        "peekOfCode": "SECURITY_LOGIN_URL = \"/login/\"\nSECURITY_LOGOUT_URL = \"/logout/\"\nSECURITY_REGISTER_URL = \"/register/\"\nSECURITY_POST_LOGIN_VIEW = \"/admin/\"\nSECURITY_POST_LOGOUT_VIEW = \"/admin/\"\nSECURITY_POST_REGISTER_VIEW = \"/admin/\"\n# Flask-Security features\nSECURITY_REGISTERABLE = True\nSECURITY_SEND_REGISTER_EMAIL = False\n# Cache config",
        "detail": "admin.config",
        "documentation": {}
    },
    {
        "label": "SECURITY_LOGOUT_URL",
        "kind": 5,
        "importPath": "admin.config",
        "description": "admin.config",
        "peekOfCode": "SECURITY_LOGOUT_URL = \"/logout/\"\nSECURITY_REGISTER_URL = \"/register/\"\nSECURITY_POST_LOGIN_VIEW = \"/admin/\"\nSECURITY_POST_LOGOUT_VIEW = \"/admin/\"\nSECURITY_POST_REGISTER_VIEW = \"/admin/\"\n# Flask-Security features\nSECURITY_REGISTERABLE = True\nSECURITY_SEND_REGISTER_EMAIL = False\n# Cache config\nCACHE_TYPE = \"SimpleCache\"",
        "detail": "admin.config",
        "documentation": {}
    },
    {
        "label": "SECURITY_REGISTER_URL",
        "kind": 5,
        "importPath": "admin.config",
        "description": "admin.config",
        "peekOfCode": "SECURITY_REGISTER_URL = \"/register/\"\nSECURITY_POST_LOGIN_VIEW = \"/admin/\"\nSECURITY_POST_LOGOUT_VIEW = \"/admin/\"\nSECURITY_POST_REGISTER_VIEW = \"/admin/\"\n# Flask-Security features\nSECURITY_REGISTERABLE = True\nSECURITY_SEND_REGISTER_EMAIL = False\n# Cache config\nCACHE_TYPE = \"SimpleCache\"\nCACHE_DEFAULT_TIMEOUT = 300",
        "detail": "admin.config",
        "documentation": {}
    },
    {
        "label": "SECURITY_POST_LOGIN_VIEW",
        "kind": 5,
        "importPath": "admin.config",
        "description": "admin.config",
        "peekOfCode": "SECURITY_POST_LOGIN_VIEW = \"/admin/\"\nSECURITY_POST_LOGOUT_VIEW = \"/admin/\"\nSECURITY_POST_REGISTER_VIEW = \"/admin/\"\n# Flask-Security features\nSECURITY_REGISTERABLE = True\nSECURITY_SEND_REGISTER_EMAIL = False\n# Cache config\nCACHE_TYPE = \"SimpleCache\"\nCACHE_DEFAULT_TIMEOUT = 300",
        "detail": "admin.config",
        "documentation": {}
    },
    {
        "label": "SECURITY_POST_LOGOUT_VIEW",
        "kind": 5,
        "importPath": "admin.config",
        "description": "admin.config",
        "peekOfCode": "SECURITY_POST_LOGOUT_VIEW = \"/admin/\"\nSECURITY_POST_REGISTER_VIEW = \"/admin/\"\n# Flask-Security features\nSECURITY_REGISTERABLE = True\nSECURITY_SEND_REGISTER_EMAIL = False\n# Cache config\nCACHE_TYPE = \"SimpleCache\"\nCACHE_DEFAULT_TIMEOUT = 300",
        "detail": "admin.config",
        "documentation": {}
    },
    {
        "label": "SECURITY_POST_REGISTER_VIEW",
        "kind": 5,
        "importPath": "admin.config",
        "description": "admin.config",
        "peekOfCode": "SECURITY_POST_REGISTER_VIEW = \"/admin/\"\n# Flask-Security features\nSECURITY_REGISTERABLE = True\nSECURITY_SEND_REGISTER_EMAIL = False\n# Cache config\nCACHE_TYPE = \"SimpleCache\"\nCACHE_DEFAULT_TIMEOUT = 300",
        "detail": "admin.config",
        "documentation": {}
    },
    {
        "label": "SECURITY_REGISTERABLE",
        "kind": 5,
        "importPath": "admin.config",
        "description": "admin.config",
        "peekOfCode": "SECURITY_REGISTERABLE = True\nSECURITY_SEND_REGISTER_EMAIL = False\n# Cache config\nCACHE_TYPE = \"SimpleCache\"\nCACHE_DEFAULT_TIMEOUT = 300",
        "detail": "admin.config",
        "documentation": {}
    },
    {
        "label": "SECURITY_SEND_REGISTER_EMAIL",
        "kind": 5,
        "importPath": "admin.config",
        "description": "admin.config",
        "peekOfCode": "SECURITY_SEND_REGISTER_EMAIL = False\n# Cache config\nCACHE_TYPE = \"SimpleCache\"\nCACHE_DEFAULT_TIMEOUT = 300",
        "detail": "admin.config",
        "documentation": {}
    },
    {
        "label": "CACHE_TYPE",
        "kind": 5,
        "importPath": "admin.config",
        "description": "admin.config",
        "peekOfCode": "CACHE_TYPE = \"SimpleCache\"\nCACHE_DEFAULT_TIMEOUT = 300",
        "detail": "admin.config",
        "documentation": {}
    },
    {
        "label": "CACHE_DEFAULT_TIMEOUT",
        "kind": 5,
        "importPath": "admin.config",
        "description": "admin.config",
        "peekOfCode": "CACHE_DEFAULT_TIMEOUT = 300",
        "detail": "admin.config",
        "documentation": {}
    },
    {
        "label": "reload",
        "kind": 5,
        "importPath": "admin.gunicorn_conf",
        "description": "admin.gunicorn_conf",
        "peekOfCode": "reload = DEBUG\n# The address and port your Flask app will listen on\nbind = f\"{ADMIN_HOST}:{ADMIN_PORT}\"\n# Number of workers. Gunicorn recommends 2-4 workers per core\nworkers = 1\n# The location of your Flask app\nwsgi_app = \"admin.app:app\"\n# Set logging - this example logs to a file\naccesslog = \"-\"\nerrorlog = \"-\"",
        "detail": "admin.gunicorn_conf",
        "documentation": {}
    },
    {
        "label": "bind",
        "kind": 5,
        "importPath": "admin.gunicorn_conf",
        "description": "admin.gunicorn_conf",
        "peekOfCode": "bind = f\"{ADMIN_HOST}:{ADMIN_PORT}\"\n# Number of workers. Gunicorn recommends 2-4 workers per core\nworkers = 1\n# The location of your Flask app\nwsgi_app = \"admin.app:app\"\n# Set logging - this example logs to a file\naccesslog = \"-\"\nerrorlog = \"-\"",
        "detail": "admin.gunicorn_conf",
        "documentation": {}
    },
    {
        "label": "workers",
        "kind": 5,
        "importPath": "admin.gunicorn_conf",
        "description": "admin.gunicorn_conf",
        "peekOfCode": "workers = 1\n# The location of your Flask app\nwsgi_app = \"admin.app:app\"\n# Set logging - this example logs to a file\naccesslog = \"-\"\nerrorlog = \"-\"",
        "detail": "admin.gunicorn_conf",
        "documentation": {}
    },
    {
        "label": "wsgi_app",
        "kind": 5,
        "importPath": "admin.gunicorn_conf",
        "description": "admin.gunicorn_conf",
        "peekOfCode": "wsgi_app = \"admin.app:app\"\n# Set logging - this example logs to a file\naccesslog = \"-\"\nerrorlog = \"-\"",
        "detail": "admin.gunicorn_conf",
        "documentation": {}
    },
    {
        "label": "accesslog",
        "kind": 5,
        "importPath": "admin.gunicorn_conf",
        "description": "admin.gunicorn_conf",
        "peekOfCode": "accesslog = \"-\"\nerrorlog = \"-\"",
        "detail": "admin.gunicorn_conf",
        "documentation": {}
    },
    {
        "label": "errorlog",
        "kind": 5,
        "importPath": "admin.gunicorn_conf",
        "description": "admin.gunicorn_conf",
        "peekOfCode": "errorlog = \"-\"",
        "detail": "admin.gunicorn_conf",
        "documentation": {}
    },
    {
        "label": "AmplitudeTelegramLogger",
        "kind": 6,
        "importPath": "bot.analytics.amplitude.client",
        "description": "bot.analytics.amplitude.client",
        "peekOfCode": "class AmplitudeTelegramLogger(AbstractAnalyticsLogger):\n    def __init__(self, api_token: str, base_url: str = AMPLITUDE_ENDPOINT) -> None:\n        self._api_token: str = api_token\n        self._base_url: str = base_url\n        self._headers = {\"Content-Type\": \"application/json\", \"Accept\": \"*/*\"}\n        self._timeout = ClientTimeout(total=15)\n        self.SUCCESS_STATUS_CODE = 200\n    async def _send_request(\n        self,\n        event: BaseEvent,",
        "detail": "bot.analytics.amplitude.client",
        "documentation": {}
    },
    {
        "label": "AMPLITUDE_ENDPOINT",
        "kind": 5,
        "importPath": "bot.analytics.amplitude.client",
        "description": "bot.analytics.amplitude.client",
        "peekOfCode": "AMPLITUDE_ENDPOINT = \"https://api2.amplitude.com/2/httpapi\"\nclass AmplitudeTelegramLogger(AbstractAnalyticsLogger):\n    def __init__(self, api_token: str, base_url: str = AMPLITUDE_ENDPOINT) -> None:\n        self._api_token: str = api_token\n        self._base_url: str = base_url\n        self._headers = {\"Content-Type\": \"application/json\", \"Accept\": \"*/*\"}\n        self._timeout = ClientTimeout(total=15)\n        self.SUCCESS_STATUS_CODE = 200\n    async def _send_request(\n        self,",
        "detail": "bot.analytics.amplitude.client",
        "documentation": {}
    },
    {
        "label": "GoogleAnalyticsTelegramLogger",
        "kind": 6,
        "importPath": "bot.analytics.google.client",
        "description": "bot.analytics.google.client",
        "peekOfCode": "class GoogleAnalyticsTelegramLogger(AbstractAnalyticsLogger):\n    def __init__(self, api_secret: str, measurement_id: str, base_url: str = GOOGLE_ANALYTICS_ENDPOINT) -> None:\n        self._api_secret: str = api_secret\n        self._measurement_id: str = measurement_id\n        self._base_url: str = base_url\n        self._headers = {\"Content-Type\": \"application/json\", \"Accept\": \"*/*\"}\n    async def _send_request(\n        self,\n        event: BaseEvent,\n    ) -> dict:",
        "detail": "bot.analytics.google.client",
        "documentation": {}
    },
    {
        "label": "GOOGLE_ANALYTICS_ENDPOINT",
        "kind": 5,
        "importPath": "bot.analytics.google.client",
        "description": "bot.analytics.google.client",
        "peekOfCode": "GOOGLE_ANALYTICS_ENDPOINT = \"https://www.google-analytics.com\"\nclass GoogleAnalyticsTelegramLogger(AbstractAnalyticsLogger):\n    def __init__(self, api_secret: str, measurement_id: str, base_url: str = GOOGLE_ANALYTICS_ENDPOINT) -> None:\n        self._api_secret: str = api_secret\n        self._measurement_id: str = measurement_id\n        self._base_url: str = base_url\n        self._headers = {\"Content-Type\": \"application/json\", \"Accept\": \"*/*\"}\n    async def _send_request(\n        self,\n        event: BaseEvent,",
        "detail": "bot.analytics.google.client",
        "documentation": {}
    },
    {
        "label": "PosthogTelegramLogger",
        "kind": 6,
        "importPath": "bot.analytics.posthog.client",
        "description": "bot.analytics.posthog.client",
        "peekOfCode": "class PosthogTelegramLogger(AbstractAnalyticsLogger):\n    def __init__(self, api_token: str, base_url: str = POSTHOG_ENDPOINT) -> None:\n        self._api_token: str = api_token\n        self._base_url: str = base_url\n        self._headers = {\n            \"Authorization\": \"Bearer ${POSTHOG_PERSONAL_API_KEY}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"*/*\",\n        }\n        self._timeout = 15",
        "detail": "bot.analytics.posthog.client",
        "documentation": {}
    },
    {
        "label": "POSTHOG_ENDPOINT",
        "kind": 5,
        "importPath": "bot.analytics.posthog.client",
        "description": "bot.analytics.posthog.client",
        "peekOfCode": "POSTHOG_ENDPOINT = \"https://app.posthog.com\"\nclass PosthogTelegramLogger(AbstractAnalyticsLogger):\n    def __init__(self, api_token: str, base_url: str = POSTHOG_ENDPOINT) -> None:\n        self._api_token: str = api_token\n        self._base_url: str = base_url\n        self._headers = {\n            \"Authorization\": \"Bearer ${POSTHOG_PERSONAL_API_KEY}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"*/*\",\n        }",
        "detail": "bot.analytics.posthog.client",
        "documentation": {}
    },
    {
        "label": "UserProperties",
        "kind": 6,
        "importPath": "bot.analytics.types",
        "description": "bot.analytics.types",
        "peekOfCode": "class UserProperties(BaseModel):\n    first_name: str | None = None\n    last_name: str | None = None\n    username: str | None = None\n    is_premium: str | None = None\n    url: str | None = None\nclass EventProperties(BaseModel):\n    chat_id: int | None = None\n    chat_type: str | None = None\n    text: str | None = None",
        "detail": "bot.analytics.types",
        "documentation": {}
    },
    {
        "label": "EventProperties",
        "kind": 6,
        "importPath": "bot.analytics.types",
        "description": "bot.analytics.types",
        "peekOfCode": "class EventProperties(BaseModel):\n    chat_id: int | None = None\n    chat_type: str | None = None\n    text: str | None = None\n    command: str | None = None\n    payment_method: PaymentMethod | None = None\nclass Plan(BaseModel):\n    branch: str | None = None\n    source: str | None = None\n    version: str | None = None",
        "detail": "bot.analytics.types",
        "documentation": {}
    },
    {
        "label": "Plan",
        "kind": 6,
        "importPath": "bot.analytics.types",
        "description": "bot.analytics.types",
        "peekOfCode": "class Plan(BaseModel):\n    branch: str | None = None\n    source: str | None = None\n    version: str | None = None\nclass BaseEvent(BaseModel):\n    user_id: int\n    event_type: EventType\n    time: int | None = None  # int(datetime.now().timestamp() * 1000)\n    user_properties: UserProperties | None = None\n    event_properties: EventProperties | None = None",
        "detail": "bot.analytics.types",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "kind": 6,
        "importPath": "bot.analytics.types",
        "description": "bot.analytics.types",
        "peekOfCode": "class BaseEvent(BaseModel):\n    user_id: int\n    event_type: EventType\n    time: int | None = None  # int(datetime.now().timestamp() * 1000)\n    user_properties: UserProperties | None = None\n    event_properties: EventProperties | None = None\n    app_version: str | None = None\n    platform: str | None = None\n    carrier: str | None = None\n    country: str | None = None",
        "detail": "bot.analytics.types",
        "documentation": {}
    },
    {
        "label": "AbstractAnalyticsLogger",
        "kind": 6,
        "importPath": "bot.analytics.types",
        "description": "bot.analytics.types",
        "peekOfCode": "class AbstractAnalyticsLogger(ABC):\n    @abstractmethod\n    async def log_event(self, event: BaseEvent) -> None:\n        pass",
        "detail": "bot.analytics.types",
        "documentation": {}
    },
    {
        "label": "EventType",
        "kind": 5,
        "importPath": "bot.analytics.types",
        "description": "bot.analytics.types",
        "peekOfCode": "EventType = Literal[\n    \"Start Session\",\n    \"End Session\",\n    \"Revenue\",\n    \"Revenue (Verified)\",\n    \"Revenue (Unverified)\",\n    \"Sign Up\",\n    \"Select Item\",\n    \"View Item\",\n    \"Complete Purchase\",",
        "detail": "bot.analytics.types",
        "documentation": {}
    },
    {
        "label": "PaymentMethod",
        "kind": 5,
        "importPath": "bot.analytics.types",
        "description": "bot.analytics.types",
        "peekOfCode": "PaymentMethod = Literal[\"Stripe\", \"PayPal\", \"Square\", \"Crypto\"]\nclass UserProperties(BaseModel):\n    first_name: str | None = None\n    last_name: str | None = None\n    username: str | None = None\n    is_premium: str | None = None\n    url: str | None = None\nclass EventProperties(BaseModel):\n    chat_id: int | None = None\n    chat_type: str | None = None",
        "detail": "bot.analytics.types",
        "documentation": {}
    },
    {
        "label": "build_key",
        "kind": 2,
        "importPath": "bot.cache.redis",
        "description": "bot.cache.redis",
        "peekOfCode": "def build_key(*args: Args, **kwargs: Kwargs) -> str:\n    \"\"\"Build a string key based on provided arguments and keyword arguments.\"\"\"\n    args_str = \":\".join(map(str, args))\n    kwargs_str = \":\".join(f\"{key}={value}\" for key, value in sorted(kwargs.items()))\n    return f\"{args_str}:{kwargs_str}\"\nasync def set_redis_value(\n    key: bytes | str,\n    value: bytes | str,\n    ttl: int | timedelta | None = DEFAULT_TTL,\n    is_transaction: bool = False,",
        "detail": "bot.cache.redis",
        "documentation": {}
    },
    {
        "label": "cached",
        "kind": 2,
        "importPath": "bot.cache.redis",
        "description": "bot.cache.redis",
        "peekOfCode": "def cached(\n    ttl: int | timedelta = DEFAULT_TTL,\n    namespace: str = \"main\",\n    cache: Redis = redis_client,\n    key_builder: Callable[..., str] = build_key,\n    serializer: AbstractSerializer | None = None,\n) -> Callable[[Callable[..., Awaitable[_Func]]], Callable[..., Awaitable[_Func]]]:\n    \"\"\"Caches the function's return value into a key generated with module_name, function_name, and args.\n    Args:\n        ttl (int | timedelta): Time-to-live for the cached value.",
        "detail": "bot.cache.redis",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TTL",
        "kind": 5,
        "importPath": "bot.cache.redis",
        "description": "bot.cache.redis",
        "peekOfCode": "DEFAULT_TTL = 10\n_Func = TypeVar(\"_Func\")\nArgs = str | int  # basically only user_id is used as identifier\nKwargs = Any\ndef build_key(*args: Args, **kwargs: Kwargs) -> str:\n    \"\"\"Build a string key based on provided arguments and keyword arguments.\"\"\"\n    args_str = \":\".join(map(str, args))\n    kwargs_str = \":\".join(f\"{key}={value}\" for key, value in sorted(kwargs.items()))\n    return f\"{args_str}:{kwargs_str}\"\nasync def set_redis_value(",
        "detail": "bot.cache.redis",
        "documentation": {}
    },
    {
        "label": "_Func",
        "kind": 5,
        "importPath": "bot.cache.redis",
        "description": "bot.cache.redis",
        "peekOfCode": "_Func = TypeVar(\"_Func\")\nArgs = str | int  # basically only user_id is used as identifier\nKwargs = Any\ndef build_key(*args: Args, **kwargs: Kwargs) -> str:\n    \"\"\"Build a string key based on provided arguments and keyword arguments.\"\"\"\n    args_str = \":\".join(map(str, args))\n    kwargs_str = \":\".join(f\"{key}={value}\" for key, value in sorted(kwargs.items()))\n    return f\"{args_str}:{kwargs_str}\"\nasync def set_redis_value(\n    key: bytes | str,",
        "detail": "bot.cache.redis",
        "documentation": {}
    },
    {
        "label": "Args",
        "kind": 5,
        "importPath": "bot.cache.redis",
        "description": "bot.cache.redis",
        "peekOfCode": "Args = str | int  # basically only user_id is used as identifier\nKwargs = Any\ndef build_key(*args: Args, **kwargs: Kwargs) -> str:\n    \"\"\"Build a string key based on provided arguments and keyword arguments.\"\"\"\n    args_str = \":\".join(map(str, args))\n    kwargs_str = \":\".join(f\"{key}={value}\" for key, value in sorted(kwargs.items()))\n    return f\"{args_str}:{kwargs_str}\"\nasync def set_redis_value(\n    key: bytes | str,\n    value: bytes | str,",
        "detail": "bot.cache.redis",
        "documentation": {}
    },
    {
        "label": "Kwargs",
        "kind": 5,
        "importPath": "bot.cache.redis",
        "description": "bot.cache.redis",
        "peekOfCode": "Kwargs = Any\ndef build_key(*args: Args, **kwargs: Kwargs) -> str:\n    \"\"\"Build a string key based on provided arguments and keyword arguments.\"\"\"\n    args_str = \":\".join(map(str, args))\n    kwargs_str = \":\".join(f\"{key}={value}\" for key, value in sorted(kwargs.items()))\n    return f\"{args_str}:{kwargs_str}\"\nasync def set_redis_value(\n    key: bytes | str,\n    value: bytes | str,\n    ttl: int | timedelta | None = DEFAULT_TTL,",
        "detail": "bot.cache.redis",
        "documentation": {}
    },
    {
        "label": "AbstractSerializer",
        "kind": 6,
        "importPath": "bot.cache.serialization",
        "description": "bot.cache.serialization",
        "peekOfCode": "class AbstractSerializer(ABC):\n    @abstractmethod\n    def serialize(self, obj: Any) -> Any:\n        \"\"\"Support for serializing objects stored in Redis.\"\"\"\n    @abstractmethod\n    def deserialize(self, obj: Any) -> Any:\n        \"\"\"Support for deserializing objects stored in Redis.\"\"\"\nclass PickleSerializer(AbstractSerializer):\n    \"\"\"Serialize values using pickle.\"\"\"\n    def serialize(self, obj: Any) -> bytes:",
        "detail": "bot.cache.serialization",
        "documentation": {}
    },
    {
        "label": "PickleSerializer",
        "kind": 6,
        "importPath": "bot.cache.serialization",
        "description": "bot.cache.serialization",
        "peekOfCode": "class PickleSerializer(AbstractSerializer):\n    \"\"\"Serialize values using pickle.\"\"\"\n    def serialize(self, obj: Any) -> bytes:\n        return pickle.dumps(obj)\n    def deserialize(self, obj: bytes) -> Any:\n        \"\"\"Deserialize values using pickle.\"\"\"\n        return pickle.loads(obj)\nclass JSONSerializer(AbstractSerializer):\n    \"\"\"Serialize values using JSON.\"\"\"\n    def serialize(self, obj: Any) -> bytes:",
        "detail": "bot.cache.serialization",
        "documentation": {}
    },
    {
        "label": "JSONSerializer",
        "kind": 6,
        "importPath": "bot.cache.serialization",
        "description": "bot.cache.serialization",
        "peekOfCode": "class JSONSerializer(AbstractSerializer):\n    \"\"\"Serialize values using JSON.\"\"\"\n    def serialize(self, obj: Any) -> bytes:\n        return orjson.dumps(obj)\n    def deserialize(self, obj: str) -> Any:\n        \"\"\"Deserialize values using JSON.\"\"\"\n        return orjson.loads(obj)",
        "detail": "bot.cache.serialization",
        "documentation": {}
    },
    {
        "label": "EnvBaseSettings",
        "kind": 6,
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "peekOfCode": "class EnvBaseSettings(BaseSettings):\n    model_config = SettingsConfigDict(\n        env_file=\".env\", env_file_encoding=\"utf-8\", extra=\"ignore\")\nclass WebhookSettings(EnvBaseSettings):\n    USE_WEBHOOK: bool = False\n    WEBHOOK_BASE_URL: str = \"https://xxx.ngrok-free.app\"\n    WEBHOOK_PATH: str = \"/webhook\"\n    WEBHOOK_SECRET: str = \"\"\n    WEBHOOK_HOST: str = \"localhost\"\n    WEBHOOK_PORT: int = 8080",
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "WebhookSettings",
        "kind": 6,
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "peekOfCode": "class WebhookSettings(EnvBaseSettings):\n    USE_WEBHOOK: bool = False\n    WEBHOOK_BASE_URL: str = \"https://xxx.ngrok-free.app\"\n    WEBHOOK_PATH: str = \"/webhook\"\n    WEBHOOK_SECRET: str = \"\"\n    WEBHOOK_HOST: str = \"localhost\"\n    WEBHOOK_PORT: int = 8080\n    @property\n    def webhook_url(self) -> str:\n        if settings.USE_WEBHOOK:",
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "BotSettings",
        "kind": 6,
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "peekOfCode": "class BotSettings(WebhookSettings):\n    BOT_TOKEN: str\n    SUPPORT_URL: str | None = None\n    RATE_LIMIT: int | float = 0.5  # for throttling control\nclass DeepSeekSettings(EnvBaseSettings):\n    DEEPSEEK_TOKEN: str\n    DEEPSEEK_URL: str\nclass DBSettings(EnvBaseSettings):\n    DB_HOST: str = \"postgres\"\n    DB_PORT: int = 5432",
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "DeepSeekSettings",
        "kind": 6,
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "peekOfCode": "class DeepSeekSettings(EnvBaseSettings):\n    DEEPSEEK_TOKEN: str\n    DEEPSEEK_URL: str\nclass DBSettings(EnvBaseSettings):\n    DB_HOST: str = \"postgres\"\n    DB_PORT: int = 5432\n    DB_USER: str = \"postgres\"\n    DB_PASS: str | None = None\n    DB_NAME: str = \"postgres\"\n    @property",
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "DBSettings",
        "kind": 6,
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "peekOfCode": "class DBSettings(EnvBaseSettings):\n    DB_HOST: str = \"postgres\"\n    DB_PORT: int = 5432\n    DB_USER: str = \"postgres\"\n    DB_PASS: str | None = None\n    DB_NAME: str = \"postgres\"\n    @property\n    def database_url(self) -> URL | str:\n        if self.DB_PASS:\n            return f\"postgresql+asyncpg://{self.DB_USER}:{self.DB_PASS}@{self.DB_HOST}:{self.DB_PORT}/{self.DB_NAME}\"",
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "CacheSettings",
        "kind": 6,
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "peekOfCode": "class CacheSettings(EnvBaseSettings):\n    REDIS_HOST: str = \"redis\"\n    REDIS_PORT: int = 6379\n    REDIS_PASS: str | None = None\n    # REDIS_DATABASE: int = 1\n    # REDIS_USERNAME: int | None = None\n    # REDIS_TTL_STATE: int | None = None\n    # REDIS_TTL_DATA: int | None = None\n    @property\n    def redis_url(self) -> str:",
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "peekOfCode": "class Settings(BotSettings, DBSettings, CacheSettings, DeepSeekSettings):\n    DEBUG: bool = False\n    SENTRY_DSN: str | None = None\n    AMPLITUDE_API_KEY: str  # or for example it could be POSTHOG_API_KEY\nsettings = Settings()",
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "DIR",
        "kind": 5,
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "peekOfCode": "DIR = Path(__file__).absolute().parent.parent.parent\nBOT_DIR = Path(__file__).absolute().parent.parent\nLOCALES_DIR = f\"{BOT_DIR}/locales\"\nI18N_DOMAIN = \"messages\"\nDEFAULT_LOCALE = \"en\"\nclass EnvBaseSettings(BaseSettings):\n    model_config = SettingsConfigDict(\n        env_file=\".env\", env_file_encoding=\"utf-8\", extra=\"ignore\")\nclass WebhookSettings(EnvBaseSettings):\n    USE_WEBHOOK: bool = False",
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "BOT_DIR",
        "kind": 5,
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "peekOfCode": "BOT_DIR = Path(__file__).absolute().parent.parent\nLOCALES_DIR = f\"{BOT_DIR}/locales\"\nI18N_DOMAIN = \"messages\"\nDEFAULT_LOCALE = \"en\"\nclass EnvBaseSettings(BaseSettings):\n    model_config = SettingsConfigDict(\n        env_file=\".env\", env_file_encoding=\"utf-8\", extra=\"ignore\")\nclass WebhookSettings(EnvBaseSettings):\n    USE_WEBHOOK: bool = False\n    WEBHOOK_BASE_URL: str = \"https://xxx.ngrok-free.app\"",
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "LOCALES_DIR",
        "kind": 5,
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "peekOfCode": "LOCALES_DIR = f\"{BOT_DIR}/locales\"\nI18N_DOMAIN = \"messages\"\nDEFAULT_LOCALE = \"en\"\nclass EnvBaseSettings(BaseSettings):\n    model_config = SettingsConfigDict(\n        env_file=\".env\", env_file_encoding=\"utf-8\", extra=\"ignore\")\nclass WebhookSettings(EnvBaseSettings):\n    USE_WEBHOOK: bool = False\n    WEBHOOK_BASE_URL: str = \"https://xxx.ngrok-free.app\"\n    WEBHOOK_PATH: str = \"/webhook\"",
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "I18N_DOMAIN",
        "kind": 5,
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "peekOfCode": "I18N_DOMAIN = \"messages\"\nDEFAULT_LOCALE = \"en\"\nclass EnvBaseSettings(BaseSettings):\n    model_config = SettingsConfigDict(\n        env_file=\".env\", env_file_encoding=\"utf-8\", extra=\"ignore\")\nclass WebhookSettings(EnvBaseSettings):\n    USE_WEBHOOK: bool = False\n    WEBHOOK_BASE_URL: str = \"https://xxx.ngrok-free.app\"\n    WEBHOOK_PATH: str = \"/webhook\"\n    WEBHOOK_SECRET: str = \"\"",
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_LOCALE",
        "kind": 5,
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "peekOfCode": "DEFAULT_LOCALE = \"en\"\nclass EnvBaseSettings(BaseSettings):\n    model_config = SettingsConfigDict(\n        env_file=\".env\", env_file_encoding=\"utf-8\", extra=\"ignore\")\nclass WebhookSettings(EnvBaseSettings):\n    USE_WEBHOOK: bool = False\n    WEBHOOK_BASE_URL: str = \"https://xxx.ngrok-free.app\"\n    WEBHOOK_PATH: str = \"/webhook\"\n    WEBHOOK_SECRET: str = \"\"\n    WEBHOOK_HOST: str = \"localhost\"",
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "bot.core.config",
        "description": "bot.core.config",
        "peekOfCode": "settings = Settings()",
        "detail": "bot.core.config",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "bot.core.loader",
        "description": "bot.core.loader",
        "peekOfCode": "app = web.Application()\ntoken = settings.BOT_TOKEN\nbot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))\nredis_client = Redis(\n    connection_pool=ConnectionPool(\n        host=settings.REDIS_HOST,\n        port=settings.REDIS_PORT,\n        password=settings.REDIS_PASS,\n        db=0,\n    ),",
        "detail": "bot.core.loader",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 5,
        "importPath": "bot.core.loader",
        "description": "bot.core.loader",
        "peekOfCode": "token = settings.BOT_TOKEN\nbot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))\nredis_client = Redis(\n    connection_pool=ConnectionPool(\n        host=settings.REDIS_HOST,\n        port=settings.REDIS_PORT,\n        password=settings.REDIS_PASS,\n        db=0,\n    ),\n)",
        "detail": "bot.core.loader",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "bot.core.loader",
        "description": "bot.core.loader",
        "peekOfCode": "bot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))\nredis_client = Redis(\n    connection_pool=ConnectionPool(\n        host=settings.REDIS_HOST,\n        port=settings.REDIS_PORT,\n        password=settings.REDIS_PASS,\n        db=0,\n    ),\n)\nstorage = RedisStorage(",
        "detail": "bot.core.loader",
        "documentation": {}
    },
    {
        "label": "redis_client",
        "kind": 5,
        "importPath": "bot.core.loader",
        "description": "bot.core.loader",
        "peekOfCode": "redis_client = Redis(\n    connection_pool=ConnectionPool(\n        host=settings.REDIS_HOST,\n        port=settings.REDIS_PORT,\n        password=settings.REDIS_PASS,\n        db=0,\n    ),\n)\nstorage = RedisStorage(\n    redis=redis_client,",
        "detail": "bot.core.loader",
        "documentation": {}
    },
    {
        "label": "storage",
        "kind": 5,
        "importPath": "bot.core.loader",
        "description": "bot.core.loader",
        "peekOfCode": "storage = RedisStorage(\n    redis=redis_client,\n    key_builder=DefaultKeyBuilder(with_bot_id=True),\n)\ndp = Dispatcher(storage=storage)\ni18n: I18n = I18n(path=LOCALES_DIR, default_locale=DEFAULT_LOCALE, domain=I18N_DOMAIN)\nDEBUG = settings.DEBUG",
        "detail": "bot.core.loader",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "bot.core.loader",
        "description": "bot.core.loader",
        "peekOfCode": "dp = Dispatcher(storage=storage)\ni18n: I18n = I18n(path=LOCALES_DIR, default_locale=DEFAULT_LOCALE, domain=I18N_DOMAIN)\nDEBUG = settings.DEBUG",
        "detail": "bot.core.loader",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "bot.core.loader",
        "description": "bot.core.loader",
        "peekOfCode": "DEBUG = settings.DEBUG",
        "detail": "bot.core.loader",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "bot.database.models.base",
        "description": "bot.database.models.base",
        "peekOfCode": "class Base(DeclarativeBase):\n    repr_cols_num = 3  # print first columns\n    repr_cols: tuple[str, ...] = ()  # extra printed columns\n    def __repr__(self) -> str:\n        cols = [\n            f\"{col}={getattr(self, col)}\"\n            for idx, col in enumerate(self.__table__.columns.keys())\n            if col in self.repr_cols or idx < self.repr_cols_num\n        ]\n        return f\"<{self.__class__.__name__} {', '.join(cols)}>\"",
        "detail": "bot.database.models.base",
        "documentation": {}
    },
    {
        "label": "int_pk",
        "kind": 5,
        "importPath": "bot.database.models.base",
        "description": "bot.database.models.base",
        "peekOfCode": "int_pk = Annotated[int, mapped_column(primary_key=True, unique=True, autoincrement=False)]\nbig_int_pk = Annotated[int, mapped_column(primary_key=True, unique=True, autoincrement=False, type_=BigInteger)]\ncreated_at = Annotated[datetime.datetime, mapped_column(server_default=text(\"TIMEZONE('utc', now())\"))]\nclass Base(DeclarativeBase):\n    repr_cols_num = 3  # print first columns\n    repr_cols: tuple[str, ...] = ()  # extra printed columns\n    def __repr__(self) -> str:\n        cols = [\n            f\"{col}={getattr(self, col)}\"\n            for idx, col in enumerate(self.__table__.columns.keys())",
        "detail": "bot.database.models.base",
        "documentation": {}
    },
    {
        "label": "big_int_pk",
        "kind": 5,
        "importPath": "bot.database.models.base",
        "description": "bot.database.models.base",
        "peekOfCode": "big_int_pk = Annotated[int, mapped_column(primary_key=True, unique=True, autoincrement=False, type_=BigInteger)]\ncreated_at = Annotated[datetime.datetime, mapped_column(server_default=text(\"TIMEZONE('utc', now())\"))]\nclass Base(DeclarativeBase):\n    repr_cols_num = 3  # print first columns\n    repr_cols: tuple[str, ...] = ()  # extra printed columns\n    def __repr__(self) -> str:\n        cols = [\n            f\"{col}={getattr(self, col)}\"\n            for idx, col in enumerate(self.__table__.columns.keys())\n            if col in self.repr_cols or idx < self.repr_cols_num",
        "detail": "bot.database.models.base",
        "documentation": {}
    },
    {
        "label": "created_at",
        "kind": 5,
        "importPath": "bot.database.models.base",
        "description": "bot.database.models.base",
        "peekOfCode": "created_at = Annotated[datetime.datetime, mapped_column(server_default=text(\"TIMEZONE('utc', now())\"))]\nclass Base(DeclarativeBase):\n    repr_cols_num = 3  # print first columns\n    repr_cols: tuple[str, ...] = ()  # extra printed columns\n    def __repr__(self) -> str:\n        cols = [\n            f\"{col}={getattr(self, col)}\"\n            for idx, col in enumerate(self.__table__.columns.keys())\n            if col in self.repr_cols or idx < self.repr_cols_num\n        ]",
        "detail": "bot.database.models.base",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 6,
        "importPath": "bot.database.models.user",
        "description": "bot.database.models.user",
        "peekOfCode": "class UserModel(Base):\n    __tablename__ = \"users\"\n    id: Mapped[big_int_pk]\n    first_name: Mapped[str]\n    last_name: Mapped[str | None]\n    username: Mapped[str | None]\n    language_code: Mapped[str | None]\n    referrer: Mapped[str | None]\n    created_at: Mapped[created_at]\n    is_admin: Mapped[bool] = mapped_column(default=False)",
        "detail": "bot.database.models.user",
        "documentation": {}
    },
    {
        "label": "CConnection",
        "kind": 6,
        "importPath": "bot.database.database",
        "description": "bot.database.database",
        "peekOfCode": "class CConnection(Connection):  # type: ignore\n    def _get_unique_id(self, prefix: str) -> str:\n        return f\"__asyncpg_{prefix}_{uuid4()}__\"\ndef get_engine(url: URL | str = settings.database_url) -> AsyncEngine:\n    return create_async_engine(\n        url=url,\n        echo=settings.DEBUG,\n        pool_size=0,\n        connect_args={\n            \"connection_class\": CConnection,",
        "detail": "bot.database.database",
        "documentation": {}
    },
    {
        "label": "get_engine",
        "kind": 2,
        "importPath": "bot.database.database",
        "description": "bot.database.database",
        "peekOfCode": "def get_engine(url: URL | str = settings.database_url) -> AsyncEngine:\n    return create_async_engine(\n        url=url,\n        echo=settings.DEBUG,\n        pool_size=0,\n        connect_args={\n            \"connection_class\": CConnection,\n        },\n    )\ndef get_sessionmaker(engine: AsyncEngine) -> async_sessionmaker[AsyncSession]:",
        "detail": "bot.database.database",
        "documentation": {}
    },
    {
        "label": "get_sessionmaker",
        "kind": 2,
        "importPath": "bot.database.database",
        "description": "bot.database.database",
        "peekOfCode": "def get_sessionmaker(engine: AsyncEngine) -> async_sessionmaker[AsyncSession]:\n    return async_sessionmaker(bind=engine, autoflush=False, expire_on_commit=False,)\ndb_url = settings.database_url\nengine = get_engine(url=db_url)\nsessionmaker = get_sessionmaker(engine)",
        "detail": "bot.database.database",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "bot.database.database",
        "description": "bot.database.database",
        "peekOfCode": "db_url = settings.database_url\nengine = get_engine(url=db_url)\nsessionmaker = get_sessionmaker(engine)",
        "detail": "bot.database.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "bot.database.database",
        "description": "bot.database.database",
        "peekOfCode": "engine = get_engine(url=db_url)\nsessionmaker = get_sessionmaker(engine)",
        "detail": "bot.database.database",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "kind": 5,
        "importPath": "bot.database.database",
        "description": "bot.database.database",
        "peekOfCode": "sessionmaker = get_sessionmaker(engine)",
        "detail": "bot.database.database",
        "documentation": {}
    },
    {
        "label": "AdminFilter",
        "kind": 6,
        "importPath": "bot.filters.admin",
        "description": "bot.filters.admin",
        "peekOfCode": "class AdminFilter(BaseFilter):\n    \"\"\"Allows only administrators (whose database column is_admin=True).\"\"\"\n    async def __call__(self, message: Message, session: AsyncSession) -> bool:\n        if not message.from_user:\n            return False\n        user_id = message.from_user.id\n        return await is_admin(session=session, user_id=user_id)",
        "detail": "bot.filters.admin",
        "documentation": {}
    },
    {
        "label": "NumberFilter",
        "kind": 6,
        "importPath": "bot.filters.number",
        "description": "bot.filters.number",
        "peekOfCode": "class NumberFilter(BaseFilter):\n    \"\"\"Allows only numbers with or without a dot.\"\"\"\n    async def __call__(self, message: Message) -> bool:\n        if not message.text:\n            return False\n        try:\n            float(message.text)\n        except ValueError:\n            return False\n        else:",
        "detail": "bot.filters.number",
        "documentation": {}
    },
    {
        "label": "DeepSeekStates",
        "kind": 6,
        "importPath": "bot.handlers.deepseek_message",
        "description": "bot.handlers.deepseek_message",
        "peekOfCode": "class DeepSeekStates(StatesGroup):\n    waiting_for_question = State()\n    processing = State()\n@router.message(DeepSeekStates.waiting_for_question)\nasync def process_deepseek_question(message: Message, state: FSMContext):\n    user_text = message.text\n    await message.answer(\"⏳ Думаю...\")\n    await state.set_state(DeepSeekStates.processing)\n    try:\n        reply = ask_deepseek(user_text)",
        "detail": "bot.handlers.deepseek_message",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "bot.handlers.deepseek_message",
        "description": "bot.handlers.deepseek_message",
        "peekOfCode": "router = Router()\nclass DeepSeekStates(StatesGroup):\n    waiting_for_question = State()\n    processing = State()\n@router.message(DeepSeekStates.waiting_for_question)\nasync def process_deepseek_question(message: Message, state: FSMContext):\n    user_text = message.text\n    await message.answer(\"⏳ Думаю...\")\n    await state.set_state(DeepSeekStates.processing)\n    try:",
        "detail": "bot.handlers.deepseek_message",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "bot.handlers.export_users",
        "description": "bot.handlers.export_users",
        "peekOfCode": "router = Router(name=\"export_users\")\n@router.message(Command(commands=\"export_users\"), AdminFilter())\nasync def export_users_handler(message: Message, session: AsyncSession) -> None:\n    \"\"\"Export all users in csv file.\"\"\"\n    all_users: list[UserModel] = await get_all_users(session)\n    document: BufferedInputFile = await convert_users_to_csv(all_users)\n    count: int = await get_user_count(session)\n    await message.answer_document(document=document, caption=_(\"user counter: <b>{count}</b>\").format(count=count))",
        "detail": "bot.handlers.export_users",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "bot.handlers.info",
        "description": "bot.handlers.info",
        "peekOfCode": "router = Router(name=\"info\")\n@router.message(Command(commands=[\"info\", \"help\", \"about\"]))\nasync def info_handler(message: types.Message) -> None:\n    \"\"\"Information about bot.\"\"\"\n    await message.answer(_(\"about\"))",
        "detail": "bot.handlers.info",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "bot.handlers.menu",
        "description": "bot.handlers.menu",
        "peekOfCode": "router = Router(name=\"menu\")\n@router.message(Command(commands=[\"menu\", \"main\"]))\nasync def menu_handler(message: types.Message) -> None:\n    \"\"\"Return main menu.\"\"\"\n    await message.answer(_(\"title main keyboard\"), reply_markup=main_keyboard())",
        "detail": "bot.handlers.menu",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "bot.handlers.menu_callbacks",
        "description": "bot.handlers.menu_callbacks",
        "peekOfCode": "router = Router(name=\"menu_callbacks\")\n@router.callback_query(lambda c: c.data == \"chatgpt\")\nasync def chatgpt_callback(callback: CallbackQuery, state: FSMContext):\n    await callback.message.answer(_(\"Enter your question\"), reply_markup=back_button_keyboard())\n    await state.set_state(DeepSeekStates.waiting_for_question)\n    await callback.answer()\n@router.callback_query(lambda c: c.data == \"text_insert\")\nasync def text_insert_callback(callback: CallbackQuery):\n    await callback.message.answer(_(\"Enter your text\"), reply_markup=back_button_keyboard())\n    await callback.answer()",
        "detail": "bot.handlers.menu_callbacks",
        "documentation": {}
    },
    {
        "label": "MetricsView",
        "kind": 6,
        "importPath": "bot.handlers.metrics",
        "description": "bot.handlers.metrics",
        "peekOfCode": "class MetricsView(web.View):\n    def __init__(\n        self,\n        request: Request,\n        registry: prometheus_client.CollectorRegistry = prometheus_client.REGISTRY,\n    ) -> None:\n        self._request = request\n        self.registry = registry\n    async def get(self) -> Response:\n        response = Response(body=prometheus_client.generate_latest(self.registry))",
        "detail": "bot.handlers.metrics",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "bot.handlers.start",
        "description": "bot.handlers.start",
        "peekOfCode": "router = Router(name=\"start\")\n@router.message(CommandStart())\n@analytics.track_event(\"Sign Up\")\nasync def start_handler(message: types.Message) -> None:\n    \"\"\"Welcome message.\"\"\"\n    await message.answer(_(\"first message\"), reply_markup=main_keyboard())",
        "detail": "bot.handlers.start",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "bot.handlers.support",
        "description": "bot.handlers.support",
        "peekOfCode": "router = Router(name=\"support\")\n@router.message(Command(commands=[\"supports\", \"support\", \"contacts\", \"contact\"]))\nasync def support_handler(message: types.Message) -> None:\n    \"\"\"Return a button with a link to the project.\"\"\"\n    await message.answer(_(\"support text\"), reply_markup=contacts_keyboard())",
        "detail": "bot.handlers.support",
        "documentation": {}
    },
    {
        "label": "contacts_keyboard",
        "kind": 2,
        "importPath": "bot.keyboards.inline.contacts",
        "description": "bot.keyboards.inline.contacts",
        "peekOfCode": "def contacts_keyboard() -> InlineKeyboardMarkup:\n    \"\"\"Use when call contacts command.\"\"\"\n    buttons = [\n        [InlineKeyboardButton(text=_(\"support button\"), url=settings.SUPPORT_URL)],\n    ]\n    keyboard = InlineKeyboardBuilder(markup=buttons)\n    return keyboard.as_markup()\ndef back_button_keyboard() -> InlineKeyboardMarkup:\n    \"\"\"Use when call support query.\"\"\"\n    buttons = [",
        "detail": "bot.keyboards.inline.contacts",
        "documentation": {}
    },
    {
        "label": "back_button_keyboard",
        "kind": 2,
        "importPath": "bot.keyboards.inline.contacts",
        "description": "bot.keyboards.inline.contacts",
        "peekOfCode": "def back_button_keyboard() -> InlineKeyboardMarkup:\n    \"\"\"Use when call support query.\"\"\"\n    buttons = [\n        [InlineKeyboardButton(text=_(\"back button\"), callback_data=\"menu\")],\n    ]\n    keyboard = InlineKeyboardBuilder(markup=buttons)\n    return keyboard.as_markup()",
        "detail": "bot.keyboards.inline.contacts",
        "documentation": {}
    },
    {
        "label": "main_keyboard",
        "kind": 2,
        "importPath": "bot.keyboards.inline.menu",
        "description": "bot.keyboards.inline.menu",
        "peekOfCode": "def main_keyboard() -> InlineKeyboardMarkup:\n    \"\"\"Use in main menu.\"\"\"\n    buttons = [\n        [InlineKeyboardButton(text=_(\"chatgpt button\"), callback_data=\"chatgpt\")],\n        [InlineKeyboardButton(text=_(\"text insert button\"), callback_data=\"text_insert\")],\n        [InlineKeyboardButton(text=_(\"settings button\"), callback_data=\"settings\")],\n        [InlineKeyboardButton(text=_(\"text output button\"), callback_data=\"text_output\")],\n    ]\n    keyboard = InlineKeyboardBuilder(markup=buttons)\n    keyboard.adjust(1, 1, 2)",
        "detail": "bot.keyboards.inline.menu",
        "documentation": {}
    },
    {
        "label": "settings_keyboard",
        "kind": 2,
        "importPath": "bot.keyboards.inline.settings",
        "description": "bot.keyboards.inline.settings",
        "peekOfCode": "def settings_keyboard() -> InlineKeyboardMarkup:\n    buttons = [\n        [InlineKeyboardButton(text=_(\"word count button\"), callback_data=\"word_count\")],\n        [InlineKeyboardButton(text=_(\"schedule button\"), callback_data=\"schedule\")],\n        [InlineKeyboardButton(text=_(\"back button\"), callback_data=\"menu\")],\n    ]\n    keyboard = InlineKeyboardBuilder(markup=buttons)\n    keyboard.adjust(1, 1, 1)\n    return keyboard.as_markup()",
        "detail": "bot.keyboards.inline.settings",
        "documentation": {}
    },
    {
        "label": "AuthMiddleware",
        "kind": 6,
        "importPath": "bot.middlewares.auth",
        "description": "bot.middlewares.auth",
        "peekOfCode": "class AuthMiddleware(BaseMiddleware):\n    async def __call__(\n        self,\n        handler: Callable[[TelegramObject, dict[str, Any]], Awaitable[Any]],\n        event: TelegramObject,\n        data: dict[str, Any],\n    ) -> Any:\n        if not isinstance(event, Message):\n            return await handler(event, data)\n        session: AsyncSession = data[\"session\"]",
        "detail": "bot.middlewares.auth",
        "documentation": {}
    },
    {
        "label": "ChannelSubscribeMiddleware",
        "kind": 6,
        "importPath": "bot.middlewares.channel_subscribe",
        "description": "bot.middlewares.channel_subscribe",
        "peekOfCode": "class ChannelSubscribeMiddleware(BaseMiddleware):\n    \"\"\"The middleware is only guaranteed to work for other users if the bot is an administrator in the chat.\"\"\"\n    def __init__(self, chat_ids: list[int | str] | int | str) -> None:\n        self.chat_ids = chat_ids\n        super().__init__()\n    async def __call__(\n        self,\n        handler: Callable[[TelegramObject, dict[str, Any]], Awaitable[Any]],\n        event: TelegramObject,\n        data: dict[str, Any],",
        "detail": "bot.middlewares.channel_subscribe",
        "documentation": {}
    },
    {
        "label": "DatabaseMiddleware",
        "kind": 6,
        "importPath": "bot.middlewares.database",
        "description": "bot.middlewares.database",
        "peekOfCode": "class DatabaseMiddleware(BaseMiddleware):\n    async def __call__(\n        self,\n        handler: Callable[[TelegramObject, dict[str, Any]], Awaitable[Any]],\n        event: TelegramObject,\n        data: dict[str, Any],\n    ) -> Any:\n        async with sessionmaker() as session:\n            data[\"session\"] = session\n            return await handler(event, data)",
        "detail": "bot.middlewares.database",
        "documentation": {}
    },
    {
        "label": "ACLMiddleware",
        "kind": 6,
        "importPath": "bot.middlewares.i18n",
        "description": "bot.middlewares.i18n",
        "peekOfCode": "class ACLMiddleware(I18nMiddleware):\n    DEFAULT_LANGUAGE_CODE = DEFAULT_LOCALE\n    async def get_locale(self, event: TelegramObject, data: dict[str, Any]) -> str:\n        session: AsyncSession = data[\"session\"]\n        if hasattr(event, \"chat_member\"):\n            return self.DEFAULT_LANGUAGE_CODE\n        user: User | None = getattr(event, \"from_user\", None)\n        if not user:\n            return self.DEFAULT_LANGUAGE_CODE\n        language_code: str | None = await get_language_code(session=session, user_id=user.id)",
        "detail": "bot.middlewares.i18n",
        "documentation": {}
    },
    {
        "label": "LoggingMiddleware",
        "kind": 6,
        "importPath": "bot.middlewares.logging",
        "description": "bot.middlewares.logging",
        "peekOfCode": "class LoggingMiddleware(BaseMiddleware):\n    def __init__(self) -> None:\n        self.logger = logger\n        super().__init__()\n    def process_message(self, message: Message) -> dict[str, Any]:\n        print_attrs: dict[str, Any] = {\"chat_type\": message.chat.type}\n        if message.from_user:\n            print_attrs[\"user_id\"] = message.from_user.id\n        if message.text:\n            print_attrs[\"text\"] = message.text",
        "detail": "bot.middlewares.logging",
        "documentation": {}
    },
    {
        "label": "prometheus_middleware_factory",
        "kind": 2,
        "importPath": "bot.middlewares.prometheus",
        "description": "bot.middlewares.prometheus",
        "peekOfCode": "def prometheus_middleware_factory(\n    metrics_prefix: str = METRICS_PREFIX,\n    registry: prometheus_client.CollectorRegistry | None = None,\n) -> Middleware:\n    used_registry = registry or prometheus_client.REGISTRY\n    requests_metrics = prometheus_client.Counter(\n        name=f\"{metrics_prefix}_requests\",\n        documentation=\"Total requests by method, scheme, remote and path template.\",\n        labelnames=[\"method\", \"scheme\", \"remote\", \"path_template\"],\n        registry=used_registry,",
        "detail": "bot.middlewares.prometheus",
        "documentation": {}
    },
    {
        "label": "METRICS_PREFIX",
        "kind": 5,
        "importPath": "bot.middlewares.prometheus",
        "description": "bot.middlewares.prometheus",
        "peekOfCode": "METRICS_PREFIX = \"tgbot\"\ndef prometheus_middleware_factory(\n    metrics_prefix: str = METRICS_PREFIX,\n    registry: prometheus_client.CollectorRegistry | None = None,\n) -> Middleware:\n    used_registry = registry or prometheus_client.REGISTRY\n    requests_metrics = prometheus_client.Counter(\n        name=f\"{metrics_prefix}_requests\",\n        documentation=\"Total requests by method, scheme, remote and path template.\",\n        labelnames=[\"method\", \"scheme\", \"remote\", \"path_template\"],",
        "detail": "bot.middlewares.prometheus",
        "documentation": {}
    },
    {
        "label": "ThrottlingMiddleware",
        "kind": 6,
        "importPath": "bot.middlewares.throttling",
        "description": "bot.middlewares.throttling",
        "peekOfCode": "class ThrottlingMiddleware(BaseMiddleware):\n    cache: TTLCache[int, Any]\n    def __init__(self, rate_limit: float = settings.RATE_LIMIT) -> None:\n        self.cache = TTLCache(maxsize=10_000, ttl=rate_limit)\n    async def __call__(\n        self,\n        handler: Callable[[TelegramObject, dict[str, Any]], Awaitable[Any]],\n        event: TelegramObject,\n        data: dict[str, Any],\n    ) -> Any:",
        "detail": "bot.middlewares.throttling",
        "documentation": {}
    },
    {
        "label": "AnalyticsService",
        "kind": 6,
        "importPath": "bot.services.analytics",
        "description": "bot.services.analytics",
        "peekOfCode": "class AnalyticsService(metaclass=SingletonMeta):\n    def __init__(self, logger: AbstractAnalyticsLogger | None) -> None:\n        self.logger = logger\n    async def _track_error(self, user_id: int, error_text: str) -> None:\n        if not self.logger:\n            return\n        await self.logger.log_event(\n            BaseEvent(\n                user_id=user_id,\n                event_type=\"Error\",",
        "detail": "bot.services.analytics",
        "documentation": {}
    },
    {
        "label": "_Func",
        "kind": 5,
        "importPath": "bot.services.analytics",
        "description": "bot.services.analytics",
        "peekOfCode": "_Func = TypeVar(\"_Func\")\nclass AnalyticsService(metaclass=SingletonMeta):\n    def __init__(self, logger: AbstractAnalyticsLogger | None) -> None:\n        self.logger = logger\n    async def _track_error(self, user_id: int, error_text: str) -> None:\n        if not self.logger:\n            return\n        await self.logger.log_event(\n            BaseEvent(\n                user_id=user_id,",
        "detail": "bot.services.analytics",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "bot.services.analytics",
        "description": "bot.services.analytics",
        "peekOfCode": "logger = AmplitudeTelegramLogger(api_token=settings.AMPLITUDE_API_KEY) if settings.AMPLITUDE_API_KEY else None\nanalytics = AnalyticsService(logger)",
        "detail": "bot.services.analytics",
        "documentation": {}
    },
    {
        "label": "analytics",
        "kind": 5,
        "importPath": "bot.services.analytics",
        "description": "bot.services.analytics",
        "peekOfCode": "analytics = AnalyticsService(logger)",
        "detail": "bot.services.analytics",
        "documentation": {}
    },
    {
        "label": "ask_deepseek",
        "kind": 2,
        "importPath": "bot.services.deepseek_client",
        "description": "bot.services.deepseek_client",
        "peekOfCode": "def ask_deepseek(message: str) -> str:\n    headers = {\n        \"Authorization\": f\"Bearer {API_KEY}\",\n        \"Content-Type\": \"application/json\",\n    }\n    payload = {\n        \"model\": \"deepseek-chat\",\n        \"messages\": [{\"role\": \"user\", \"content\": message}],\n    }\n    response = requests.post(API_URL, headers=headers, json=payload)",
        "detail": "bot.services.deepseek_client",
        "documentation": {}
    },
    {
        "label": "API_URL",
        "kind": 5,
        "importPath": "bot.services.deepseek_client",
        "description": "bot.services.deepseek_client",
        "peekOfCode": "API_URL = settings.DEEPSEEK_URL\nAPI_KEY = settings.DEEPSEEK_TOKEN\ndef ask_deepseek(message: str) -> str:\n    headers = {\n        \"Authorization\": f\"Bearer {API_KEY}\",\n        \"Content-Type\": \"application/json\",\n    }\n    payload = {\n        \"model\": \"deepseek-chat\",\n        \"messages\": [{\"role\": \"user\", \"content\": message}],",
        "detail": "bot.services.deepseek_client",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "bot.services.deepseek_client",
        "description": "bot.services.deepseek_client",
        "peekOfCode": "API_KEY = settings.DEEPSEEK_TOKEN\ndef ask_deepseek(message: str) -> str:\n    headers = {\n        \"Authorization\": f\"Bearer {API_KEY}\",\n        \"Content-Type\": \"application/json\",\n    }\n    payload = {\n        \"model\": \"deepseek-chat\",\n        \"messages\": [{\"role\": \"user\", \"content\": message}],\n    }",
        "detail": "bot.services.deepseek_client",
        "documentation": {}
    },
    {
        "label": "is_command",
        "kind": 2,
        "importPath": "bot.utils.command",
        "description": "bot.utils.command",
        "peekOfCode": "def is_command(message: str | None) -> bool:\n    return bool(message and message.startswith(\"/\"))\ndef find_command_argument(message: str | None) -> str | None:\n    \"\"\"Finds the value of argument in command message text.\n    Get string from Message.text.\n    Example:\n    >>> find_command_argument(\"/start referrer\")\n    \"referrer\"\n    >>> find_command_argument(\"/start\")\n    None",
        "detail": "bot.utils.command",
        "documentation": {}
    },
    {
        "label": "find_command_argument",
        "kind": 2,
        "importPath": "bot.utils.command",
        "description": "bot.utils.command",
        "peekOfCode": "def find_command_argument(message: str | None) -> str | None:\n    \"\"\"Finds the value of argument in command message text.\n    Get string from Message.text.\n    Example:\n    >>> find_command_argument(\"/start referrer\")\n    \"referrer\"\n    >>> find_command_argument(\"/start\")\n    None\n    >>> find_command_argument(\"hi! it's me\")\n    None",
        "detail": "bot.utils.command",
        "documentation": {}
    },
    {
        "label": "SingletonMeta",
        "kind": 6,
        "importPath": "bot.utils.singleton",
        "description": "bot.utils.singleton",
        "peekOfCode": "class SingletonMeta(type):\n    _instances: ClassVar[dict[type, SingletonMetaType]] = {}\n    def __call__(cls, *args: Any, **kwargs: Any) -> SingletonMetaType:\n        if cls not in cls._instances:\n            instance = super().__call__(*args, **kwargs)\n            cls._instances[cls] = instance\n        return cls._instances[cls]",
        "detail": "bot.utils.singleton",
        "documentation": {}
    },
    {
        "label": "SingletonMetaType",
        "kind": 5,
        "importPath": "bot.utils.singleton",
        "description": "bot.utils.singleton",
        "peekOfCode": "SingletonMetaType = type[\"SingletonMeta\"]\nclass SingletonMeta(type):\n    _instances: ClassVar[dict[type, SingletonMetaType]] = {}\n    def __call__(cls, *args: Any, **kwargs: Any) -> SingletonMetaType:\n        if cls not in cls._instances:\n            instance = super().__call__(*args, **kwargs)\n            cls._instances[cls] = instance\n        return cls._instances[cls]",
        "detail": "bot.utils.singleton",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.2024-01-23_initial",
        "description": "migrations.versions.2024-01-23_initial",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"users\",\n        sa.Column(\"id\", sa.BigInteger(), autoincrement=False, nullable=False),\n        sa.Column(\"first_name\", sa.String(), nullable=False),\n        sa.Column(\"last_name\", sa.String(), nullable=True),\n        sa.Column(\"username\", sa.String(), nullable=True),\n        sa.Column(\"language_code\", sa.String(), nullable=True),\n        sa.Column(\"created_at\", sa.DateTime(), server_default=sa.text(\"TIMEZONE('utc', now())\"), nullable=False),",
        "detail": "migrations.versions.2024-01-23_initial",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.2024-01-23_initial",
        "description": "migrations.versions.2024-01-23_initial",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table(\"users\")\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.2024-01-23_initial",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.2024-01-24_user_referrer",
        "description": "migrations.versions.2024-01-24_user_referrer",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('users', sa.Column('referrer', sa.String(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('users', 'referrer')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.2024-01-24_user_referrer",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.2024-01-24_user_referrer",
        "description": "migrations.versions.2024-01-24_user_referrer",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('users', 'referrer')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.2024-01-24_user_referrer",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "do_run_migrations",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def do_run_migrations(connection: Connection) -> None:\n    context.configure(connection=connection, target_metadata=target_metadata)\n    with context.begin_transaction():\n        context.run_migrations()\nasync def run_async_migrations() -> None:\n    \"\"\"In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = async_engine_from_config(\n        config.get_section(config.config_ini_section, {}),",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\"\"\"\n    asyncio.run(run_async_migrations())\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option(\"sqlalchemy.url\", str(settings.database_url))\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "migrations.env",
        "documentation": {}
    }
]